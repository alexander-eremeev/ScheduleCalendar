plugins {
    id 'com.android.application'            //подключить Yandex AppMetrica SDK через плагин
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.squareup.wire'
    id 'dagger.hilt.android.plugin'

    // Make sure that you have the Google services Gradle plugin
    id 'com.google.gms.google-services'

    // Add the Crashlytics Gradle plugin
    id 'com.google.firebase.crashlytics'

    // Add the Performance Monitoring Gradle plugin
    id 'com.google.firebase.firebase-perf'          //Per
     }
// NEW
apply from: "$rootDir/gradle/test-report.gradle"

ext.codeCoverage = [
        enabled      : true,
        fileBlackList: [
        ],
        fileWhiteList: [
                // UI
                '**/ui/*ViewModel*',
                '**/ui/*State*',
                // Data
                // '**/data/*Environment*',
//                '**/foundation/datasource/local/*Read*',
//                '**/foundation/datasource/local/*Write*',
                '**/basis/datasource/local/*Read*',
                '**/basis/datasource/local/*Write*',
                // '**/foundation/datasource/preference/PreferenceManager*',
                // Core
//                '**/foundation/extension/*',
                '**/basis/extension/*',
        ]
]
//------------------------------------------------------

android {
    namespace application_id

//    compileSdkVersion project.libs.versions.compile.sdk.get().toInt()    //rootProject.libs.versions.compile.sdk. //project.ext.compileSdk
//    buildToolsVersion project.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion  24
        targetSdkVersion 34
        compileSdkVersion 33
        buildToolsVersion "33.0.0"
//        appId = com.childmathematics.android.shiftschedule
//        appId = project.properties["application_id"]
        /*
        versionCode = Integer.parseInt(project.properties["version_code"])
        versionName = project.properties["version_name"]
                 */
        versionCode = 200
        versionName = "2.0.0"

/*
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        applicationId project.ext.appId
        versionCode project.ext.versionCode
        versionName project.ext.versionName

 */



        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/room-schemas".toString()]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }


        buildConfigField "String", "BUILD_TIMESTAMP", getDate()
        //------------------------------------------------------------------
        //  Статистика и реклама
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        buildConfigField "boolean", "YaAdsEnable", "false" // Включае не забудь об арр AppYandexMetricaInit.java AdMob.kt, MainYainterstitial.kt
        // Включае не забудь об арр AppYandexMetricaInit.java AdMob.kt, MainYainterstitial.kt
        buildConfigField "boolean", "AdMobEnable", "false"   // Включав не забудь об арр AppYandexMetricaInit.java AdMob.kt, MainYainterstitial.kt
        buildConfigField "boolean", "AppMetricaOn", "false"   // Включав не забудь об арр AppYandexMetricaInit.java и Manifest
        //======================================================================
        buildConfigField "boolean", "HomeRouteEnable", "true" // Включение-отключение модуля
        buildConfigField "boolean", "SettingsRouteEnable", "false" // Включение-отключение модуля
        buildConfigField "boolean", "ToDoRouteEnable", "false" // Включение-отключение модуля
        buildConfigField "boolean", "ScheduleRouteEnable", "false" // Включение-отключение модуля
        buildConfigField "boolean", "Schedule01RouteEnable", "true" // Включение-отключение модуля
        buildConfigField "boolean", "Schedule500RouteEnable", "true" // Включение-отключение модуля


        //======================================================================
        /*SETTINGS_ROUTE
                 // defining the build date
         buildConfigField "long", "BUILD_DATE", System.currentTimeMillis() + "L"
           */

    }
    signingConfigs {
        release {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('keystore.properties').newDataInputStream())

            storeFile file("${properties.getProperty('RELEASE_STORE_FILE')}")
            storePassword "${properties.getProperty('RELEASE_STORE_PASSWORD')}"
            keyAlias "${properties.getProperty('RELEASE_KEY_ALIAS')}"
            keyPassword "${properties.getProperty('RELEASE_KEY_PASSWORD')}"
        }
    }

    applicationVariants.all { variant ->
        def variantName = variant.getName()
        def debug = variantName.contains('debug')
        def appName

        if (debug) {
            appName = app_name_debug
        } else {
            appName = app_name_release
        }

        variant.mergedFlavor.manifestPlaceholders = [
                APP_NAME   : appName,
        ]
    }


    buildTypes {
        release {
            /* OLD
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

             */
            minifyEnabled true     //включение/выключение ProGuard
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

        }
        debug {
            minifyEnabled false      //включение/выключение ProGuard
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
        }

    }
    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
//        jvmTarget = '1.8'
        jvmTarget = '11'
        // TODO
//        useIR = true
        allWarningsAsErrors = true

    }
    buildFeatures {
        viewBinding true

        // Fix compose compile error

        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.androidxComposeCompiler.get()
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }

//    namespace 'com.childmathematics.android.shiftschedule'
    /*      ADS

     */
        packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

}

wire {
    kotlin {
        android = true
    }
}



//_________________________
dependencies {

    ///////////////
    // UI SUPPORT
    //////

    implementation libs.androidx.core.ktx
    implementation libs.androidx.window
    implementation libs.androidx.appcompat
    implementation libs.androidx.lifecycle.runtimeCompose
    implementation libs.androidx.lifecycle.viewModelCompose
    implementation libs.androidx.activity.compose
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.hilt.navigation.compose
    implementation libs.lottie.compose
    implementation libs.google.android.material

    // Use for bottom sheet navigation
    implementation libs.google.accompanist.navigation

    implementation libs.google.accompanist.systemuicontroller

    implementation libs.google.accompanist.pager
    implementation libs.google.accompanist.insets

    // Startup
    implementation libs.androidx.startup
    implementation libs.androidx.profileinstaller

    // Compose
    // For Compose runtime by default coroutine runtime already included from ui, foundation, implicitly
    // Not able to get rid of material lib due to we still use these component and not available yet in material3
    // androidx.compose.material.SwipeToDismiss
    // androidx.compose.material.ModalBottomSheetLayout
    implementation libs.androidx.compose.material
    implementation libs.androidx.compose.material3
    implementation libs.androidx.compose.material.iconsCore
    implementation libs.androidx.compose.material.iconsExtended
    implementation libs.androidx.compose.foundation
    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.ui.util
    implementation libs.androidx.compose.widget

    implementation libs.io.coil.compose

    ///////////////
    // ADS SUPPORT
    //////

    implementation libs.google.ads
    implementation libs.yandex.mobileads
   // implementation libs.yandex.mobmetrica

    ///////////////
    // DATA SUPPORT
    //////

    // SQL
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    kapt libs.androidx.room.compiler
    //for java based projects
    annotationProcessor libs.androidx.room.compiler


    // Key-value
    implementation libs.androidx.dataStore.core
    implementation libs.google.protobuf

    // Server
    implementation libs.bundles.networking


    ///////////////
    // CORE
    //////

    // Concurrent processing
    implementation libs.jetbrains.kotlin.coroutines

    // DI
    implementation libs.google.hilt.android
    kapt libs.google.hilt.compiler

    // Date time
    coreLibraryDesugaring(libs.android.desugarJdkLibs)

    // Analytics
    // Import the BoM for the Firebase platform
    /*
    Используя Firebase Android BoM , ваше приложение всегда будет использовать
    совместимые версии библиотек Firebase Android.
     */
    implementation platform(libs.google.firebase)
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    ///////////////
    // DEBUGGING SUPPORT
    //////

    implementation libs.debugging.compose.uiTooling



    ///////////////
    // UNIT TEST SUPPORT
    //////

    testImplementation libs.androidx.test.ext.junit
    testImplementation libs.robolectric
    testImplementation libs.junit.test
    testImplementation libs.jetbrains.test.coroutines
    testImplementation libs.turbine.test

    implementation libs.debugging.okhttp.logging
   implementation libs.debugging.chucker

}

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Compiler flag to use experimental Compose APIs

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
//        jvmTarget = "1.8"
        jvmTarget = "11"

        freeCompilerArgs += [
                "-opt-in=kotlin.RequiresOptIn"
        ]


    }
}
// Allow references to generated code
kapt {
    correctErrorTypes = true
}
static String getDate() {
    Date date = new Date()
    String dates = "\""+date.format("dd.MM.yyyy", TimeZone.default)+"\""
    return dates
}
